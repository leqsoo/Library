@model mvcbooks.Models.BookSearchModel

@{
    ViewBag.Title = "Index";
}

@Styles.Render("~/Content/font-awesome.css")
<link href="~/Content/css/table-sorter.css" rel="stylesheet" />
<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.1/css/theme.default.min.css" rel="stylesheet" />


<p>
    @Html.Partial("_CreateButtonPartial")
</p>

<h3 class="bold-font">Search Books</h3>

@using (Html.BeginForm("Index", "Books", Request.QueryString["/?Title=" + Model.Title + "&Author=" + Model.Author + "&DateFrom=" + Model.DateFrom
                            + "&DateTo=" + Model.DateTo + "&Genre=" + Model.Genre + "&Description=" + Model.Description], FormMethod.Get))
{

    <div class="container-fluid">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.Author)
        @Html.HiddenFor(model => model.Genre)

        <div class="row">
            <div class="col">
                <div class="input-group">
                    <span class="input-group-append"><i class="fa fa-book fa-fw"></i></span>
                    @Html.TextBoxFor(x => x.Title, new { @class = "input-group-text", @placeholder = "Book Title" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="col">
                <div class="input-group">
                    <span class="input-group-append"><i class="fa fa-user fa-fw"></i></span>
                    <select name="Author" class="input-group-text" placeholder="Author">
                        @if (String.IsNullOrEmpty(Model.Author) || Model.Author.Equals("Selected Author"))
                        {
                            <option disabled selected>Selected Author</option>
                        }
                        else
                        {
                            <option disabled selected> @Model.Author.Substring(Model.Author.LastIndexOf(',') + 1) </option>
                            <option>Selected Author</option>

                        }
                        @foreach (var item in Model.Authors)
                        {
                            <option> @item.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col">
                <div class="input-group">
                    <span class="input-group-append"> <i class="fa fa-calendar fa-dfrom fa-fw"></i> </span>
                    @Html.TextBoxFor(x => x.DateFrom, new { @id = "dateFrom", @onblur = "validate();", @class = "dateFromInput input-group-text", @type = "number", @placeholder = "Date From" })
                    <div class="yearContainer dateFromDropDown hide">
                        @for (int i = DateTime.Now.Year; i > 0; i--)
                        {
                            <span>@i</span>
                        }
                    </div>

                    @Html.ValidationMessageFor(model => model.DateFrom, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col">
                <div class="input-group">
                    <span class="input-group-append"> <i class="fa fa-calendar fa-dto fa-fw"></i> </span>
                    @Html.TextBoxFor(x => x.DateTo, new { @id = "dateTo", @onblur = "validate();", @class = "dateToInput input-group-text", @type = "number", @placeholder = "Date To" })
                    <div class="yearContainer dateToDropDown hide">
                        @for (int i = DateTime.Now.Year; i > 0; i--)
                        {
                            <span>@i</span>
                        }
                    </div>
                    @Html.ValidationMessageFor(model => model.DateTo, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col">
                <div class="input-group">
                    <span class="input-group-append"><i class="fa fa-glide-g fa-fw"></i> </span>
                    <select name="Genre" class="input-group-text" placeholder="Genre">
                        @if (String.IsNullOrEmpty(Model.Genre) || Model.Genre.Equals("Selected Genre"))
                        {
                            <option disabled selected>Selected Genre</option>
                        }
                        else
                        {
                            <option disabled selected> @Model.Genre.Substring(Model.Author.LastIndexOf(',') + 1) </option>
                            <option>Selected Genre</option>
                        }
                        @foreach (var item in Model.Genres)
                        {
                            <option> @item.Genre_Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col">
                <div class="input-group">
                    <span class="input-group-append"><i class="fa fa-file fa-fw"></i></span>
                    @Html.TextBoxFor(x => x.Description, new { @class = "input-group-text", @placeholder = "Description" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <br /><br />

            <div id="validateMessage" class="alert alert-danger col-md-4 col-md-offset-4"></div>


        </div>
        <div class="form-group">
            <div class="col">
                <input type="submit" value="Search" onclick="return validate();" id="submit" class="my-class btn btn-info float-right" />
            </div>
        </div>
    </div>
}

<br /><br />

<div class="col-lg-12">

    <div>

        <table id="booksTable" class="table w-100 booksTable table-striped table-responsive table-bordered genreTable ">
            <tr>
                <th scope="col" id="title">
                    @Html.DisplayNameFor(model => model.Title)
                </th>
                <th scope="col">
                    <i class="fa fa-fw fa-sort float-right"></i>
                    @Html.DisplayNameFor(model => model.Authors)
                </th>
                <th scope="col">
                    <i class="fa fa-fw fa-sort float-right"></i>
                    @Html.DisplayNameFor(model => model.DateFrom)
                </th>
                <th scope="col">
                    <i class="fa fa-fw fa-sort float-right"></i>
                    @Html.DisplayNameFor(model => model.Genres)
                </th>
                <th scope="col">
                    <i class="fa fa-fw fa-sort float-right"></i>
                    @Html.DisplayName("Total Quantity")
                </th>
                <th scope="col">
                    <i class="fa fa-fw fa-sort float-right"></i>
                    @Html.DisplayName("Currently Available")
                </th>
                <th scope="col">
                    <i class="fa fa-fw fa-sort float-right"></i>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model.Books)
            {
                if (item.Availability == 0)
                {
                    @Html.Raw("<tr class=availability0>")
                }
                else if (item.Availability == 1)
                {
                    @Html.Raw("<tr class=availability0-25>")
                }
                else if (item.Availability == 2)
                {
                    @Html.Raw("<tr class=availability25-75>")
                }
                else
                {
                    @Html.Raw("<tr class=availability75-100>")
                }
                @Html.Raw("<td>")
                @Html.DisplayFor(modelItem => item.Title)
                @Html.Raw("</td>")
                @Html.Raw("<td>")
                foreach (var auth in item.Authors)
                {
                    @Html.DisplayFor(m => auth.Name)
                    @Html.Raw("<br />")
                }
                @Html.Raw("</td>")
                @Html.Raw("<td>")
                @Html.DisplayFor(modelItem => item.Year)
                @Html.Raw("</td>")
                @Html.Raw("<td>")
                foreach (var gen in item.Genres)
                {
                    @Html.DisplayFor(m => gen.GenreName)
                    @Html.Raw("<br />")
                }
                @Html.Raw("</td>")
                @Html.Raw("<td class=quantity>")
                @Html.DisplayFor(modelItem => item.TotalQuantity)
                @Html.Raw("</td>")
                @Html.Raw("<td>")
                @Html.DisplayFor(modelItem => item.AvailableQuantity)
                @Html.Raw("</td>");
                @Html.Raw("<td class=descript>")
                @Html.DisplayFor(modelItem => item.Description)
                @Html.Raw("</td>")
                @Html.Raw("<td>")
                @Html.ActionLink("Edit", "Edit", new { id = item.BookId }, new { @class = "my-class btn btn-info" })
                @Html.ActionLink("Delete", "Delete", new { id = item.BookId }, new { onclick = "return confirm('Do you really want to delete this?');", @class = "my-class btn btn-danger btn-responsive" })
                @Html.Raw("</td>")
                @Html.Raw("<tr>")
            }
        </table>
    </div>
</div>
<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/DropDownYear.js"></script>
<script src="~/Scripts/validateDateSearch.js"></script>
<script src="~/Scripts/tablesorter/jquery.tablesorter.combined.js"></script>
<script src="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css"></script>
<script src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>

<script>

    $("table").tablesorter({

        tablesorterColumns: [{
            col: 1,
            cssAsc: 'up',
            cssDesc: 'down'
        }]

    });

    //$(document).ready(function(){
    //    var table = $('.booksTable');

    //    $('#title')
    //        .wrapInner('<span title="sort this column"/>')
    //        .each(function () {
    //            var th = $(this),
    //                thIndex = th.index(),
    //                inverse = false;

    //            th.click(function () {

    //                table.find('td').filter(function () {

    //                    return $(this).index() === thIndex;

    //                }).sortElements(function (a, b) {

    //                    return $.text([a]) > $.text([b]) ?
    //                        inverse ? -1 : 1
    //                        : inverse ? 1 : -1;

    //                }, function () {

    //                    // parentNode is the element we want to move
    //                    return this.parentNode;

    //                });

    //                inverse = !inverse;

    //            });

    //        });
    //})

    //const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

    //const comparer = (idx, asc) => (a, b) => ((v1, v2) =>
    //    v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
    //)(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

    //// do the work...
    //document.querySelectorAll('th').forEach(th => th.addEventListener('click', (() => {
    //    const table = th.closest('table');
    //    Array.from(table.querySelectorAll('tr:nth-child(n+2)'))
    //        .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc))
    //        .forEach(tr => table.appendChild(tr));
    //})));

    //function sortTable() {
    //    var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
    //    table = document.getElementById("booksTable");
    //    //table = $('.booksTable');

    //    switching = true;
    //    // Set the sorting direction to ascending:
    //    dir = "asc";
    //    /* Make a loop that will continue until
    //    no switching has been done: */
    //    while (switching) {
    //        // Start by saying: no switching is done:
    //        switching = false;
    //        rows = table.rows;
    //        console.log(rows.length)
    //        console.log(rows[1].cells[0].innerHTML)

    //        /* Loop through all table rows (except the
    //        first, which contains table headers): */
    //        for (i = 1; i < (rows.length - 1); i++) {
    //            // Start by saying there should be no switching:
    //            shouldSwitch = false;

    //            /* Get the two elements you want to compare,
    //            one from current row and one from the next: */
    //            x = rows[i].getElementsByTagName("TH");
    //            y = rows[i + 1].getElementsByTagName("TH");

    //            /* Check if the two rows should switch place,
    //            based on the direction, asc or desc: */
    //            if (dir == "asc") {
    //                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
    //                    // If so, mark as a switch and break the loop:
    //                    shouldSwitch = true;
    //                    break;
    //                }
    //            } else if (dir == "desc") {
    //                if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
    //                    // If so, mark as a switch and break the loop:
    //                    shouldSwitch = true;
    //                    break;
    //                }
    //            }
    //        }
    //        if (shouldSwitch) {
    //            /* If a switch has been marked, make the switch
    //            and mark that a switch has been done: */
    //            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
    //            switching = true;
    //            // Each time a switch is done, increase this count by 1:
    //            switchcount++;
    //        } else {
    //            /* If no switching has been done AND the direction is "asc",
    //            set the direction to "desc" and run the while loop again. */
    //            if (switchcount == 0 && dir == "asc") {
    //                dir = "desc";
    //                switching = true;
    //            }
    //        }
    //    }
    //}


</script>
<script>
    $(document).ready(function () {
        $('#booksTable').DataTable({
            "order": [[3, "desc"]]
        });
    });
</script>